package com.aggregator.news.stream;

import java.util.Properties;

import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KStreamBuilder;
import org.springframework.stereotype.Component;

import com.aggregator.news.model.News;
import com.aggregator.news.serdes.JsonDeserializer;
import com.aggregator.news.serdes.JsonSerializer;

@Component
public class NewsAggregatorStream {

	public void streamToTopic() {

		JsonDeserializer<News> jsonDeserializer = new JsonDeserializer<>(News.class);
		JsonSerializer<News> jsonSerializer = new JsonSerializer<>();

		Serde<News> newsSerde = Serdes.serdeFrom(jsonSerializer, jsonDeserializer);

		Properties config = new Properties();
		config.put(StreamsConfig.APPLICATION_ID_CONFIG, "news-aggregator-application");
		config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
		config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, newsSerde.getClass());

//		KStreamsBuilder builder = new KStreamsBuilder();
		KStreamBuilder builder = new KStreamBuilder();
		KStream<String, String> newsList = builder.stream("all-news-topic");

		System.out.println(newsList);

		/*
		 * newsList.foreach(new ForeachAction<String, String>() {
		 * 
		 * @Override public void apply(String arg0, String data) { ObjectMapper mapper =
		 * new ObjectMapper(); try { News news = mapper.readValue(data, News.class);
		 * List<String> technologyNewsCategory = Arrays
		 * .asList(NewsCategory.TECHNOLOGY.getCategory().split(":"));
		 * technologyNewsCategory.forEach(searchKey -> { if
		 * ((StringUtils.isNotEmpty(news.getTitle()) &&
		 * news.getTitle().contains(searchKey)) ||
		 * (StringUtils.isNotEmpty(news.getDescription()) &&
		 * news.getDescription().contains(searchKey))) { newsList.to("newTopic",
		 * Produced.with(Serdes.String(), Serdes.String())); System.out.println(
		 * "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++="); } });
		 * System.out.println(news); } catch (Exception exception) {
		 * exception.printStackTrace(); } } });
		 */

		KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), config);
		kafkaStreams.start();
	}

}
